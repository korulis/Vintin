TODO:
Validate separator and DateFormat.
Fix file reading to be unix compatible.
Use date time offset converted from France DateTime in ShippingEntry.Date.
Use ShippingEntry.PackageSize as enum instead of string.
Use ShippingEntry.ShippingProvider as enum.
Protect ShippingEntry type better.
Use Monads to parse lines.
Implement Linq to file parser for lazy loading.
Implement custome deserializer and use it for file parsing.
Force sequential execution for Acceptance tests.
Additionally hanndle yyyymmdd input format.
Maybe price list should be part of ShippingEntryWithCost member ?
Parse AcceptableSizes and providers from the price list. Inject the price list.
Make ShippingCostEntry imutable - avoid brittleness.
Use autoquality lib to compare entires in tests.
Gather meta data about the discountings so far and pass it around instead of reenumerating the same arrays

Some of the architecture notes.
# Decided against async methods, because if I use async for reading the file, then I loose the Ienumerable<> interface,
	and if I use the async only on the output part of the method it does not save much, because this is the last step, 
	and no other processes/calculations of the program should be happening then. So all in all it would just be an 
	unnecessary code complication.
#selfnote. injecting pure data into class aint such a bad idea. For pure functions.(?)
#I have decided that semantically (Price, Discount) = Cost = Price + Discount.
#On Discounts.Constants class: 
    Class for default constants related to the task that is being solved.
    This should hypothetically either be extracted into its own project,
    which would be referenced only by ConsoleApp and Tests project or
    Be put in tests project for testing purposes and externalized as config for production purposes.
#ThirdLpLargePackageDiscounter assumes the data is orderred by date. This is because if I do not take this assumtion, this ir not 
	single unique way to order the package entries, without taking further assumtions, because the entries might have duplicate dates.