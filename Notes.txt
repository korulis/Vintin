TODO (priority, complexity) :
1=1x1 Comment on architecture choises
2=2x1 Force sequential execution for file based tests.
2=2x1 Additionally hanndle yyyymmdd input format because it is part of ISO standard.
2=2x1 Parse AcceptableSizes and providers from the price list. Inject the price list.
2=1x2 Use autoquality lib to compare entires in tests.
3=3X1 Validate input file name from args.
4=2x2 Use ShippingEntry.PackageSize as enum instead of string.
4=2x2 Use ShippingEntry.ShippingProvider as enum.
4=1x4 Gather meta data about the discountings so far and pass it around instead of reenumerating the same arrays
6=3x2 Validate separator and DateFormat.
6=3x2 Make ShippingCostEntry imutable - avoid brittleness.
4=2x4 Use composition instead of decorator if I can not find an example where I must use decorator.
8=2x4 Read Ruby guidelines
8=2x4 Protect ShippingEntry type better.
8=2x4 Use Monads to parse lines.
20=4x5 Implement custom deserializer and use it for file parsing.
DONE 1=1x1 Reread requirements
REJECED Maybe price list should be part of ShippingEntryWithCost member ?
REJECTED Implement Linq to file parser for lazy loading.
REJECTED Use date time offset converted from France DateTime in ShippingEntry.Date.
REJECTED Fix file reading to be unix compatible.

Some of the architecture notes.
# Decided against async methods, because if I use async for reading the file, then I loose the Ienumerable<> interface,
	and if I use the async only on the output part of the method it does not save much, because this is the last step, 
	and no other paralel/alternatice and important processes/calculations should be happening then. So all in all it would just be an 
	unnecessary code complication.
#selfnote. injecting pure data into class aint such a bad idea. For pure functions.(?)
#I have decided that semantically (Price, Discount) = Cost = Price + Discount.
#On Discounts.Constants class: 
    Class for default constants related to the task that is being solved.
    This should hypothetically either be extracted into its own project,
    which would be referenced only by ConsoleApp and Tests project or
    Be put in tests project for testing purposes and externalized as config for production purposes.
#ThirdLpLargePackageDiscounter assumes the data is orderred by date. This is because if I do not take this assumtion, this ir not 
	single unique way to order the package entries, without taking further assumtions, because the entries might have duplicate dates.
#Making all Discounters into Decorators enables them to do more powerful and complex discounts, 
especially when matched with the idea of discount calculation context (which would safe some required data for among other things
for performance optimisation reasons), but it obfuscted the level of importance of the discounters...